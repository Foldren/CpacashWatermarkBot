from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile
from aiogram import Router
from aiogram.filters import Text
from source.buttons import keyboard_cancel_configured, keyboard_start_configured
from source.filters import IsAdminFilter
from source.states import StepsCreateWatermark
from source.tools.create_watermark import Watermark

rt = Router()
rt.message.filter(IsAdminFilter())


@rt.message(Text(text="üí¶ –°–æ–∑–¥–∞—Ç—å –≤–æ—Ç–µ—Ä–∫—É"))
async def start_generate_video(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(StepsCreateWatermark.send_text)
    message_text = f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –≤–æ—Ç–µ—Ä–º–∞—Ä–∫–µ ‚úçÔ∏è\n\n" \
                   f"–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞:\n" \
                   f"<code>@test_watermark\ntest</code>"
    await message.answer(message_text, parse_mode="html", reply_markup=keyboard_cancel_configured)


@rt.message(StepsCreateWatermark.send_text)
async def send_watermark(message: Message, state: FSMContext):
    await state.clear()

    if message.text:
        href_name = message.text.split("\n")
        image_path = await Watermark().create(href_name[0], href_name[1], message)

        await message.answer("–í–æ—Ç–µ—Ä–º–∞—Ä–∫ –≥–æ—Ç–æ–≤! ‚úÖ")
        await message.answer_document(
            document=FSInputFile(image_path),
            reply_markup=keyboard_start_configured
        )
    else:
        await message.answer('–û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç ü§∑‚Äç‚ôÇÔ∏è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=keyboard_start_configured)




